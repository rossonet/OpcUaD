buildscript {
  repositories {
    mavenCentral()
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "com.gorylenko.gradle-git-properties:gradle-git-properties:2.4.0"
    classpath 'com.netflix.nebula:gradle-ospackage-plugin:8.4.1'
    classpath 'de.undercouch:gradle-download-task:3.1.1'
    classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0'
    classpath "com.palantir.gradle.docker:gradle-docker:0.32.0"
  }
}

 plugins {
    id 'org.graalvm.buildtools.native' version '0.9.14'
 }

description = rootProject.description
group = rootProject.group
version = rootProject.version

ext {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	debianName = "${project.name}"
	packageName = "${project.name}"
}

repositories {
	mavenCentral()
	jcenter()
}

apply plugin: 'com.palantir.docker'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: 'jacoco'
apply plugin: "nebula.rpm"
apply plugin: 'nebula.deb'
apply plugin: 'base'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'distribution'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'application'

dependencies {
  implementation project(':opcuad-core-library');
  implementation 'org.neo4j.driver:neo4j-java-driver:5.2.0'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
  testImplementation group: 'com.ginsberg', name: 'junit5-system-exit', version: '1.1.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

task eclipseClosedDependencies {}

task eclipseClosedDependencies_ {}

eclipse {
	classpath {
	    downloadJavadoc = true
	    downloadSources = true
	}
}

docker {
  name "rossonet/${project.name}:latest"
  dockerfile file('Dockerfile.gradle')
  files "$buildDir/libs/${project.name}-${version}-all.jar"
}

task view { doLast { println "Working on project ${project.name} [ ${project.description} ]" } }

jar {
  manifest {
    attributes 'Main-Class': 'org.rossonet.opcuad.MainRunner'
  }
  enabled = true
}

jar.doLast { task ->
	ant.checksum file: task.archivePath
}

task buildDocker() {
  group "Docker Container Build"
  description 'Build Docker image'
  buildDocker.dependsOn("shadowJar")
  buildDocker.finalizedBy("docker")
}

shadowJar {
  minimize()
}

java {
  withJavadocJar()
  withSourcesJar()
}

gitProperties {
	failOnNoGitDirectory = false
	customProperty 'component', "${project.name}"
	dateFormat = "yyyy-MM-dd HH:mm:ssZ"
	dateFormatTimeZone = 'GMT'
}

task endBootJar {
	doLast{ println ("You can find the fat jar of ${project.name} in ${jar.archivePath}") }
}

test {
  useJUnitPlatform()
}

javadoc{
	destinationDir = file("${project.buildDir}/docs/javadoc/${project.name}/")
	failOnError=false
}

task theiaIdeBackend(type: Exec) {
        workingDir "./"
        commandLine 'docker', 'run', '--init', '--rm', '-p', '3000:3000', '-d', '-v', "${projectDir}:/home/project:cached", 'rossonet/theia-ide:latest'
}

task theiaIdeBackendNoCached(type: Exec) {
        workingDir "./"
        commandLine 'docker', 'run', '--init', '--rm', '-p', '3000:3000', '-d', '-v', "${projectDir}:/home/project", 'rossonet/theia-ide:latest'
}

task theiaIdeBackendNoVolume(type: Exec) {
        workingDir "./"
        commandLine 'docker', 'run', '--init', '--rm', '-p', '3000:3000', '-d', '--name', "docker-ide-${project.name}", 'rossonet/theia-ide:latest'
}

task theiaIdeBackendCopy(type: Exec) {
        theiaIdeBackendCopy.dependsOn("theiaIdeBackendNoVolume")
        workingDir "./"
        commandLine 'docker', 'cp', '.', "docker-ide-${project.name}:/home/project/"
}

task theiaIdeBackendStart(type: Exec) {
        description 'Run Theia IDE container with docker'
        theiaIdeBackendStart.dependsOn("theiaIdeBackendCopy")
        group "Theia IDE on Docker Container"
        workingDir "./"
        commandLine 'docker', 'exec', '-u', 'root', "docker-ide-${project.name}", '/bin/chown', '-R', 'theia:theia', '/home/project'
        commandLine 'docker', 'exec', '-u', 'root', "docker-ide-${project.name}", '/bin/chown', '-R', 'theia:theia', '/home/theia'
        doLast { println "\n\n*** You can find the Theia IDE at http://localhost:3000 ***" }
        doLast { println "To shutdown the IDE:\ndocker stop docker-ide-${project.name}\n- save your work on repository before!\n\n" }
}

task printTheiaIdeBackendDockerCommand(type: Exec) {
        workingDir "./"
        commandLine 'echo', 'docker', 'run', '--init', '-p', '3000:3000', '-d', '--name', "docker-ide-${project.name}", 'rossonet/theia-ide:latest'
}

task theiaIdeLocalBrowser(type: Exec) {
        group "Theia IDE on Docker Container"
        description 'Open browser to local Theia IDE'
        workingDir "./"
        commandLine 'xdg-open', 'http://localhost:3000'
}

publishing {
  publications {
    mavenJava(MavenPublication){
      artifactId = "${project.name}"
      from components.java
      versionMapping {
        usage('java-api') {
          fromResolutionOf('runtimeClasspath')
        }
        usage('java-runtime') {
          fromResolutionResult()
        }
      }
      pom {
        name = "${project.name}"
        description = "${project.description}"
        url = 'https://app.rossonet.net/'
        licenses {
          license {
            name = 'GNU AFFERO GENERAL PUBLIC LICENSE 3.0'
            url = 'https://www.gnu.org/licenses/agpl-3.0.html'
          }
        }
        developers {
          developer {
            id = 'ar4k'
            name = 'Andrea Ambrosini'
            email = 'andrea.ambrosini@rossonet.org'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/rossonet/OpcUaD.git'
          developerConnection = 'scm:git:ssh://github.com:rossonet/OpcUaD.git'
          url = 'https://github.com/rossonet/OpcUaD/tree/master'
        }
      }
    }
  }
  repositories {
    maven {
      url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      name = "sonatype"
      credentials {
        username "rossonet"
        password "${rootProject.ext.ossrhPassword}"
      }
    }
  }
}

signing {
    sign publishing.publications.mavenJava
}

application {
    mainClass = 'org.rossonet.opcuad.MainRunner'
}

graalvmNative {
    toolchainDetection = false
    binaries {
        main {
            verbose = true
            sharedLibrary = false
        }
    }
}
